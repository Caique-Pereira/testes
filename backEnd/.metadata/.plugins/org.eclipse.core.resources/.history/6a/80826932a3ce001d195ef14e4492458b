package com.users.demo.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Optional;

import org.hibernate.query.NativeQuery.ReturnableResultNode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.client.UnknownHttpStatusCodeException;

import com.users.demo.dto.UserDTO;
import com.users.demo.entities.Users;
import com.users.demo.entities.UsersExceptions;
import com.users.demo.repository.userRepository;

public class UserService {
	
	@Autowired
	userRepository userRepo;

	@Autowired
	UsersExceptions exceptions;
	
	public ArrayList<UserDTO> listAll() {
	ArrayList<UserDTO> userList = new ArrayList<UserDTO>();
	Iterable<Users> list = userRepo.findAll();
	list.forEach(x -> userList.add(new UserDTO(x)));
	return userList;
 
	}
	
	public UserDTO insert(Optional<UserDTO> dto){
		Users user = copyDtoToEntity(dto);
		userRepo.save(user); 
		return new UserDTO(user);
	}
	
	
	public ResponseEntity<?> update(@RequestBody UserDTO dto){
		Optional<Users> optionalUser  = userRepo.findById(dto.getId());
		
		if(optionalUser.isPresent())
			return new ResponseEntity<UserDTO>(new UserDTO(optionalUser.get()), HttpStatus.OK);
		else
			exceptions.setMessage("invalid user");
			return new ResponseEntity<UsersExceptions>(exceptions, HttpStatus.NOT_FOUND);
			
	}
	
	
	
	public Users copyDtoToEntity(Optional<UserDTO> optional) {
		Users user = new Users();
		user.setAge(optional.get().getAge());
		user.setCpf(optional.get().getCpf());
		user.setName(optional.get().getName());
		return user;
	} 


}
